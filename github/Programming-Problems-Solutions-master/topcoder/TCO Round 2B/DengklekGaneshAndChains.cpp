#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;


class DengklekGaneshAndChains
{
public:
    string getBestChains(vector <string> chains, vector <int> lengths)
    {
        int n = chains.size();
        for(int i = 0; i < n; i++)
        {
            string res = chains[i];
            int k = res.size();
            for(int j = 1; j < k; j++)
            {
                string now = chains[i].substr(j)+chains[i].substr(0,j);
                res = max(res,now);
            }
            chains[i] = res;
            //cout<<res<<endl;
        }
        string res = "";
        int flag[100];
        memset(flag,0,sizeof flag);
        for(int i = 0; i < lengths.size(); i++)
        {
            int p = lengths[i], pre = -1;
            for(int j = 0; j < n; j++)
            {
                if(flag[j]) continue;
                if(pre == -1)
                {
                    pre = j;
                    continue;
                }
                if(chains[pre].substr(0,p) < chains[j].substr(0,p))
                {
                    pre = j;
                }
                else if(chains[pre].substr(0,p) == chains[j].substr(0,p) && chains[pre]>chains[j])
                {
                    pre = j;
                }
            }
            flag[pre] = 1;
            res = res + chains[pre].substr(0,p);
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, string p2)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    DengklekGaneshAndChains *obj;
    string answer;
    obj = new DengklekGaneshAndChains();
    clock_t startTime = clock();
    answer = obj->getBestChains(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <int> p1;
    string p2;

    {
        // ----- test 0 -----
        string t0[] = {"topc","oder","open","twob"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,1,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "wotrod";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"ssh","she","see","sea"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,3,2,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "ssshesesee";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"wri","ter","who","are","you"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "you";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"harus","imfyo"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {5,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "yoimfushar";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

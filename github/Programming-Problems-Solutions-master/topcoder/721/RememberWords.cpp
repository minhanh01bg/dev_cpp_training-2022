#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef long long ll;
typedef pair<ll,ll> pll;

class RememberWords
{
public:
    string isPossible(int d1, int d2, int w1, int w2)
    {
        pll a = func(d1,w1);
        pll b = func(d2,w2);
        b.second++;
        b.first--;
        if(max(a.first,b.first) <= min(a.second,b.second)) return "Possible";
        return "Impossible";
    }
    pll func(ll d, ll w)
    {
        //printf("%lld %lld\n", d, w);
        //ll low, hi;
        ll tot = (d-1)*d/2;
        if(tot<w)
        {
            ll nibo = (w-tot+d-1)/d;
            pll ans = func(d,w-(nibo*d));
            ans.first += nibo;
            ans.second += nibo;
            return ans;
        }
        ll ans = 0;
        for(ll i = 0; i <= d; i++)
        {
            ll now = i*(i+1)/2;
            if(now<=w)
            {
                ans = i;
            }
            else break;
        }
        return make_pair(0,ans);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, string p4)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
    cout << "]" << endl;
    RememberWords *obj;
    string answer;
    obj = new RememberWords();
    clock_t startTime = clock();
    answer = obj->isPossible(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p4 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p4;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    string p4;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 3;
        p2 = 7;
        p3 = 18;
        p4 = "Possible";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 1;
        p2 = 3;
        p3 = 5;
        p4 = "Impossible";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 5;
        p2 = 300;
        p3 = 500;
        p4 = "Possible";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 100;
        p1 = 1;
        p2 = 0;
        p3 = 2;
        p4 = "Impossible";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 1000000000;
        p1 = 1000000000;
        p2 = 1000000000;
        p3 = 1000000000;
        p4 = "Possible";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

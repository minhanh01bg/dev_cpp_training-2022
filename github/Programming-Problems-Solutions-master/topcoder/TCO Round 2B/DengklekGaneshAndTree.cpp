#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define MX 1005
typedef long long ll;

const ll mod = 1000000007ll;

class DengklekGaneshAndTree
{
public:
    int getCount(string labels, vector <int> parents)
    {
        str = labels;
        int node = labels.size();
        for(int i = 1; i < node; i++)
        {
            adj[i].push_back(parents[i-1]);
            adj[parents[i-1]].push_back(i);
        }
        mxlevel = 0;
        dfs(0,0,1);
        sort(jump.begin(), jump.end());
        memset(dp,-1,sizeof dp);
        return func(0,0);
    }

    vector<int> adj[MX];
    string str;
    int mxlevel;
    vector<pair<int,int> > jump;
    ll dp[MX][MX];

    ll func(int pos, int com)
    {
        if(pos == jump.size())
        {
            if(com == mxlevel) return 1;
            return 0;
        }
        ll & res = dp[pos][com];
        if(res != -1) return res;
        res = 0;
        if(jump[pos].first>com+1)
        {
            return res;
        }
        res = func(pos+1,com);
        res += func(pos+1,max(com,jump[pos].second));
        res %= mod;
        return res;
    }

    int dfs(int u, int par, int lev)
    {
        int mx = lev;
        for(int i = 0; i < adj[u].size(); i++)
        {
            int v = adj[u][i];
            if(v == par) continue;
            int low = dfs(v,u,lev+1);
            if(str[u] == str[v])
                mx = max(mx, low);
        }
        if(u == 0 || (str[u] != str[par]))
        {
            jump.push_back(make_pair(lev,mx));
            //printf("%d %d\n", lev, mx);
        }
        mxlevel = max(mxlevel,lev);
        return mx;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    DengklekGaneshAndTree *obj;
    int answer;
    obj = new DengklekGaneshAndTree();
    clock_t startTime = clock();
    answer = obj->getCount(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    vector <int> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "seems";
        int t1[] = {0,1,0,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "like";
        int t1[] = {0,0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 7;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "a";
        p1.clear() /*{}*/;
        p2 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "coincidence";
        int t1[] = {0,1,2,0,2,1,4,7,7,6};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 218;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "topcoderopenroundtwobgoodluckhavefun";
        int t1[] = {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 147418098;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

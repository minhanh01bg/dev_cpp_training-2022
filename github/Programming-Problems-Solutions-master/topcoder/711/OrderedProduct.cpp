#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;
typedef long long ll;

#define MX 6000

const ll mod = 1000000007ll;

ll ncr[MX][MX];
ll dp[MX][60];
int arr[60];
int n;

ll func(int pre, int pos)
{
    if(pos == n)
    {
        return 1;
    }
    ll & res = dp[pre][pos];
    if(res != -1) return res;
    res = 0;
    for(int i = 0; i <= arr[pos]; i++)
    {
        if(i+pre == 0) continue;
        ll tem = func(pre+i,pos+1)*ncr[pre+arr[pos]-1][arr[pos]-i];
        tem %= mod;
        tem *= ncr[pre+i][i];
        tem %= mod;
        res += tem;
        res %= mod;
    }
    return res;
}

class OrderedProduct
{
public:
    int count(vector <int> a)
    {
        memset(ncr,0,sizeof ncr);
        ncr[0][0] = 1;
        for(int i = 1; i < MX; i++)
        {
            ncr[i][0] = 1;
            for(int j = 1; j < MX; j++)
            {
                ncr[i][j] = (ncr[i-1][j-1]+ncr[i-1][j])%mod;
                //printf("%lld ", ncr[i][j]);
            }
        }
//        for(int i = 0; i < 10; i++, puts(""))
//            for(int j = 0; j < 10; j++)
//            printf("%lld ", ncr[i][j]);
        n = a.size();
        for(int i = 0; i < n; i++)
        {
            arr[i] = a[i];
        }
        memset(dp,-1,sizeof dp);
        printf("%lld\n", func(0,0));
        return func(0,0);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    OrderedProduct *obj;
    int answer;
    obj = new OrderedProduct();
    clock_t startTime = clock();
    answer = obj->count(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;

    {
        // ----- test 0 -----
        int t0[] = {1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1,1,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 541;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {23,49,12};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 316396073;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {2,5,4,2,3,1,3,1,4,6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 225466557;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

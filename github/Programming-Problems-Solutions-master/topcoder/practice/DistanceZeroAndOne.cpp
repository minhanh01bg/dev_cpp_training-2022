#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;

typedef pair<int,int> pii;

vector<int> chainNode[100];
int flag[100];
char str[100][100];

class DistanceZeroAndOne
{
public:
    vector <string> construct(vector <int> dist0, vector <int> dist1)
    {
        vector <string> ans;
        memset(flag,0,sizeof flag);
        memset(str,'N',sizeof str);
        int n = dist0.size();
        for(int i = 0; i <= n; i++)
        {
            chainNode[i].clear();
        }
        for(int i = 0; i <= dist0[1]; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(dist0[j] == i && dist1[j] == dist0[1]-i)
                {
                    chainNode[i].push_back(j);
                    flag[j] = 1;
                }
            }
            if(chainNode[i].size() == 0) return ans;
            if(i == 0 && chainNode[i].size() > 1) return ans;
            if(i == dist0[1] && chainNode[i].size() > 1) return ans;
        }
        for(int i = 0; i < n; i++)
        {
            if(flag[i]) continue;
            int t = false;
            for(int j = 0; j < n; j++)
            {
                if(dist0[j]+1 == dist0[i] && dist1[i] == dist1[j]+1)
                {
                    str[i][j] = 'Y';
                    str[j][i] = 'Y';
                    t = true;
                    break;
                }
            }
            if(t) break;
            for(int j = 0; j < n && (!t); j++)
                for(int k = 0; k < n && (!t); k++)
                {
                    if(dist0[j] == dist0[i]-1 && dist1[j]<=dist1[i]+1)
                    {
                        if(dist1[k] == dist1[i]-1 && dist0[k] <= dist0[k]+1)
                        {
                            str[i][j] = 'Y';
                            str[j][i] = 'Y';
                            str[i][k] = 'Y';
                            str[k][i] = 'Y';
                            t = true;
                            break;
                        }
                    }
                }
            if(!t) {
                    printf("------%d\n", i);
                    return ans;
            }
        }
        for(int i = 1; i <= dist0[1]; i++)
        {
            for(int j = 0; j < chainNode[i].size(); j++)
            {
                int a = chainNode[i-1][0];
                int b = chainNode[i][j];
                str[a][b] = 'Y';
                str[b][a] = 'Y';
            }
        }
        for(int i = 0; i < n; i++)
        {
            str[i][n] = 0;
            ans.push_back((string) str[i]);
        }
        return ans;
    }

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <string> p2)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    DistanceZeroAndOne *obj;
    vector <string> answer;
    obj = new DistanceZeroAndOne();
    clock_t startTime = clock();
    answer = obj->construct(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i)
        {
            if (i > 0)
            {
                cout << ",";
            }
            cout << "\"" << p2[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer)
    {
        if (answer.size() != p2.size())
        {
            res = false;
        }
        else
        {
            for (int i = 0; int(answer.size()) > i; ++i)
            {
                if (answer[i] != p2[i])
                {
                    res = false;
                }
            }
        }
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <string> p2;

    {
        // ----- test 0 -----
        int t0[] = {0,2,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,0,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"NNY","NNY","YYN"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {0,2,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,0,2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {3,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,0,1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,0,1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"NYYY","YNYY","YYNN","YYNN"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {0,3,1,2,2,3,4,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {3,0,2,1,2,3,4,4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"NNYNNNNN","NNNYNNNN","YNNYYNNN","NYYNYNNN","NNYYNYNN","NNNNYNYY","NNNNNYNN","NNNNNYNN"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {0,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"NY","YN"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

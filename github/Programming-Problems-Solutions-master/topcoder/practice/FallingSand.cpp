#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


bool func(int row,int col,vector<string> &board)
{
    bool ans = false;
    for(int i = 1; i < row; i++)
    {
        for(int j = 0; j < col; j++)
        {
            if(board[i][j] != '.') continue;
            if(board[i-1][j] != 'o') continue;
            ans = true;
            board[i][j] = 'o';
            board[i-1][j] = '.';
        }
    }
    return ans;
}

class FallingSand {
public:
	vector <string> simulate(vector <string> board) {
		int row = board.size();
        int col = board[0].size();
        while(func(row,col,board));
        return board;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FallingSand *obj;
	vector <string> answer;
	obj = new FallingSand();
	clock_t startTime = clock();
	answer = obj->simulate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
	// ----- test 0 -----
	string t0[] = {"ooooo","..x..","....x",".....","....o"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"o",".","o",".","o",".","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".",".",".",".","o","o","o"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"oxxxxooo","xooooxxx","..xx.ooo","oooox.o.","..x....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"oxxxxooo","x.oo.xxx","..xxo...",".oo.x.o.","ooxo.ooo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"..o..o..o..o..o..o..o..o..o..o..o","o..o..o..o..o..o..o..o..o..o..o..",".o..o..o..o..o..o..o..o..o..o..o.","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxx...xxx......xxx............","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","..o..o..o..o..o..o..o..o..o..o..o","o..o..o..o..o..o..o..o..o..o..o..",".o..o..o..o..o..o..o..o..o..o..o."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".................................",".................................","...ooo...ooo...ooooooooo...ooo...","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","...xxxoooxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxx...xxx......xxx............","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...",".................................","ooo.........ooo.........ooo...ooo","ooooooooooooooooooooooooooooooooo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
